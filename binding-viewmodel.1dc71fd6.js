(window.webpackJsonp=window.webpackJsonp||[]).push([["binding-viewmodel"],{190:function(n,e,t){"use strict";t.r(e);var o=t(1),r=t.n(o),i='<section>\n    <p><strong data-bind="text: someData"></strong></p>\n    <p>This is the same view used by all compose bindings on the page</p>\n</section>\n';var a=new function(){var n=this;this.view='<section>\r\n    <h1>Using the compose binding</h1>\r\n    <p>Shared context input: <input data-bind="value: $root.sharedInput"></p>\r\n    <p>Own context input: <input data-bind="value: $root.ownInput"></p>\r\n\r\n    <h2>Shared context</h2>\r\n    <p>\r\n        <code>data-bind="compose:sharedVMScreen</code> where <code>sharedVMScreen</code> is the just the html template\r\n        directly passed in.\r\n    </p>\r\n    <div data-bind="compose:sharedVMScreen"></div>\r\n\r\n    <h2>Own context with a function that returns an object</h2>\r\n    <p>\r\n        <code>data-bind="compose:ownVMScreen()</code> where <code>ownVMScreen()</code> is a function that return an\r\n        object with which has a view property on it.\r\n    </p>\r\n    <div data-bind="compose:ownVMScreen()"></div>\r\n\r\n    <h2>Own context that is an object</h2>\r\n    <p>\r\n        <code>data-bind="compose:anotherOwnVMScreenObject</code> where <code>anotherOwnVMScreenObject</code> is an\r\n        object with which has a view property on it.\r\n    </p>\r\n    <div data-bind="compose:anotherOwnVMScreenObject"></div>\r\n\r\n    <h2>Own context that is a function</h2>\r\n    <p>\r\n        <code>data-bind="compose:anotherOwnVMScreenFunction</code> where <code>anotherOwnVMScreenFunction</code> is a\r\n        function that returns has a view.\r\n    </p>\r\n    <div data-bind="compose:anotherOwnVMScreenFunction"></div>\r\n</section>\r\n',this.moduleName="BindingViewModel",this.sharedInput=r.a.observable("Shares parent context").extend({required:!0});var e=r.a.observable("Own binding context").extend({required:!0});this.ownInput=e,this.sharedVMScreen=i,this.someData=r.a.pureComputed((function(){return n.sharedInput()}),this),this.ownVMScreen=function(){return{model:{someData:r.a.pureComputed((function(){return n.ownInput()}),n),moduleName:"The own VM screen binding model"},view:i}},this.anotherOwnVMScreenObject={view:i,model:{someData:r.a.pureComputed((function(){return n.ownInput()}),this),moduleName:"The another own VM screen binding model"}},this.anotherOwnVMScreenFunction=function(){this.someData=r.a.pureComputed((function(){return e()}),this),this.viewName="Another own VM screen",this.view=i,this.moduleName="Another as a function model"}};e.default=a}}]);
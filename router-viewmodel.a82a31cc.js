(self.webpackChunkdurandal_starterkit=self.webpackChunkdurandal_starterkit||[]).push([["router-viewmodel"],{4583:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>s}),t(3450);var a=t(3062),o=t(6132);t(5735),t(8188),t(3439),t(8673),t(6886);const i={view:"<div>\n    <p>\n        We also are able to split our routes from the main application into asynchronous routes using\n        <code>dynamic imports</code>.\n    </p>\n    <p>\n        This child route is a <code>static import</code> for the parent route so it is bundled together with it, however\n        the parent route is <code>dynamically imported</code> so it's split from our main applications bundle.\n    </p>\n    <p>\n        You can see this in action if you open the developer console and click on the do a refresh of this page without\n        caching.\n    </p>\n</div>\n"},r=[{route:"",title:"How",moduleId:function(){return i},modelName:"How",nav:!0},{route:"nested",title:"Nested async route",moduleId:function(){return t.e("nested-async-route").then(t.bind(t,2441)).then((function(e){return e.default}))},nav:!0}];var d={view:'<section id="async">\n    <header><h3>Router</h3></header>\n\n    <article>\n        <header><h4>How?</h4></header>\n        <p>\n            Typically Durandals <code>router</code> module requires you to specify a\n            <code>moduleId</code>\n            for each route.\n        </p>\n\n        <p>\n            To allow Webpack to know these are actual module dependencies, we instead set each\n            <code>moduleId</code> to a function that returns the actual ViewModel instance instead.\n        </p>\n    </article>\n    <br>\n\n    <article>\n        <header><h4>Asynchronous Routes</h4></header>\n\n        <ul class="nav nav-tabs" data-bind="foreach: router.navigationModel">\n            <li data-bind="css: { active: isActive }">\n                <a data-bind="attr: { href: hash }, html: title"></a>\n            </li>\n        </ul>\n\n        <div class="container" style="padding-top: 20px" data-bind="router: { transition: transition, cacheViews: true }"></div>\n    </article>\n</section>\n',transition:o.Z};d.router=a.Nd.createChildRouter().makeRelative({fromParent:!0}).map(r).buildNavigationModel();const s=d}}]);
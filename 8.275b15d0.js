(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "../durandal-es6/plugins/serializer.js":
/*!*********************************************!*\
  !*** ../durandal-es6/plugins/serializer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/system */ \"../durandal-es6/core/system.js\");\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable prefer-rest-params */\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-param-reassign */\n\n/**\n * Serializes and deserializes data to/from JSON.\n * @module serializer\n * @requires system\n */\n\nfunction SerializerModule() {\n  /**\n   * @class SerializerModule\n   * @static\n   */\n  return {\n    /**\n     * The name of the attribute that the serializer should use to identify an object's type.\n     * @property {string} typeAttribute\n     * @default type\n     */\n    typeAttribute: \"type\",\n\n    /**\n     * The amount of space to use for indentation when writing out JSON.\n     * @property {string|number} space\n     * @default undefined\n     */\n    space: undefined,\n\n    /**\n     * The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.\n     * @method replacer\n     * @param {string} key The object key to check.\n     * @param {object} value The object value to check.\n     * @return {object} The value to serialize.\n     */\n    replacer: function replacer(key, value) {\n      if (key) {\n        var first = key[0];\n\n        if (first === \"_\" || first === \"$\") {\n          return undefined;\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Serializes the object.\n     * @method serialize\n     * @param {object} object The object to serialize.\n     * @param {object} [settings] Settings can specify a replacer or space to override the serializer defaults.\n     * @return {string} The JSON string.\n     */\n    serialize: function serialize(object, settings) {\n      settings = settings === undefined ? {} : settings;\n\n      if (_core_system__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isString(settings) || _core_system__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(settings)) {\n        settings = {\n          space: settings\n        };\n      }\n\n      return JSON.stringify(object, settings.replacer || this.replacer, settings.space || this.space);\n    },\n\n    /**\n     * Gets the type id for an object instance, using the configured `typeAttribute`.\n     * @method getTypeId\n     * @param {object} object The object to serialize.\n     * @return {string} The type.\n     */\n    getTypeId: function getTypeId(object) {\n      if (object) {\n        return object[this.typeAttribute];\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Maps type ids to object constructor functions. Keys are type ids and values are functions.\n     * @property {object} typeMap.\n     */\n    typeMap: {},\n\n    /**\n     * Adds a type id/constructor function mampping to the `typeMap`.\n     * @method registerType\n     * @param {string} typeId The type id.\n     * @param {function} constructor The constructor.\n     */\n    registerType: function registerType() {\n      var first = arguments[0]; // eslint-disable-next-line eqeqeq\n\n      if (arguments.length == 1) {\n        var id = first[this.typeAttribute] || _core_system__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getModuleId(first);\n        this.typeMap[id] = first;\n      } else {\n        this.typeMap[first] = arguments[1];\n      }\n    },\n\n    /**\n     * The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.\n     * @method reviver\n     * @param {string} key The attribute key.\n     * @param {object} value The object value associated with the key.\n     * @param {function} getTypeId A custom function used to get the type id from a value.\n     * @param {object} getConstructor A custom function used to get the constructor function associated with a type id.\n     * @return {object} The value.\n     */\n    reviver: function reviver(key, value, getTypeId, getConstructor) {\n      var typeId = getTypeId(value);\n\n      if (typeId) {\n        var ctor = getConstructor(typeId);\n\n        if (ctor) {\n          if (ctor.fromJSON) {\n            return ctor.fromJSON(value);\n          } // eslint-disable-next-line new-cap\n\n\n          return new ctor(value);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Deserialize the JSON.\n     * @method deserialize\n     * @param {string} text The JSON string.\n     * @param {object} [settings] Settings can specify a reviver, getTypeId function or getConstructor function.\n     * @return {object} The deserialized object.\n     */\n    deserialize: function deserialize(text, settings) {\n      var that = this;\n      settings = settings || {};\n\n      var getTypeId = settings.getTypeId || function (object) {\n        return that.getTypeId(object);\n      };\n\n      var getConstructor = settings.getConstructor || function (id) {\n        return that.typeMap[id];\n      };\n\n      var reviver = settings.reviver || function (key, value) {\n        return that.reviver(key, value, getTypeId, getConstructor);\n      };\n\n      return JSON.parse(text, reviver);\n    },\n\n    /**\n     * Clone the object.\n     * @method clone\n     * @param {object} obj The object to clone.\n     * @param {object} [settings] Settings can specify any of the options allowed by the serialize or deserialize methods.\n     * @return {object} The new clone.\n     */\n    clone: function clone(obj, settings) {\n      return this.deserialize(this.serialize(obj, settings), settings);\n    }\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new SerializerModule());\n\n//# sourceURL=webpack:///../durandal-es6/plugins/serializer.js?");

/***/ })

}]);